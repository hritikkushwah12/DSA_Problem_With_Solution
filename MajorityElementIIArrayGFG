Problem:
You are given an array of integer arr[] where each number represents a vote to a candidate. Return the candidates 
that have votes greater than one-third of the total votes,
If there's not a majority vote, return an empty array. 
Note: The answer should be returned in an increasing format.

Aproach 1(brute):O(n)*O(n)=O(n^2)

// Java program to find Majority element in an array
// using nested loop

import java.util.ArrayList;
import java.util.List;

class GfG {
    
    // Function to find Majority elements in an array
    static List<Integer> findMajority(int[] arr) {
        int n = arr.length;
        List<Integer> res = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            
            // Count the frequency of arr[i]
            int cnt = 0;
            for (int j = i; j < n; j++) {
                if (arr[j] == arr[i])
                    cnt += 1;
            }
          
            // Check if arr[i] is a majority element
            if (cnt > (n / 3)) {
              
                // Add arr[i] only if it is not already
                // present in the result
                if (res.size() == 0 || arr[i] != res.get(0)) {
                    res.add(arr[i]);
                }
            }
          
            // If we have found two majority elements, 
            // we can stop our search
            if (res.size() == 2) {
                if (res.get(0) > res.get(1))
                    java.util.Collections.swap(res, 0, 1);
                break;
            }
        }

        return res;
    }

    public static void main(String[] args) {
        int[] arr = {2, 2, 3, 1, 3, 2, 1, 1};
        List<Integer> res = findMajority(arr);
        for (int ele : res)
            System.out.print(ele + " ");
    }
}


Approach 2(Better):Using hashmap but s.c. will be O(n) due to storing hashmap

class Solution {
    // Function to find the majority elements in the array
    public List<Integer> findMajority(int[] nums) {
        HashMap<Integer,Integer> frequency=new HashMap<>();
        List <Integer> result=new ArrayList<>();
    // finding frequency
    
    for(int elem:nums){
        frequency.put(elem,freq.getOrDefault(elem,0)+1);
    }
    // counting votes of each candidate
    for(Map.Entry<Integer,Integer> it:frequency.entrySet()){
        int candidate=it.getKey();
        int count=it.getValue();
    // criteria 
    if(count>nums.length/3){
        result.add(candidate);
     }
    }
    if(result.size==2&&result.get(0)>result.get(1)){
        int temp=result.get(0);
       result.set(0,result.get(1));
       result.set(1,temp);
    }
    return result;
    
        
    }
}
